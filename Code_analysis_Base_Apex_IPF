> indir <- file.path("/data2/zhenjun/lung_apex_base/Samtools/sorted")
> list.files(indir) 
 [1] "CTR_Apex_1_sorted.bam"       "CTR_Apex_1_sorted.bam.bai"  
 [3] "CTR_Apex_2_sorted.bam"       "CTR_Apex_2_sorted.bam.bai"  
 [5] "CTR_Apex_3_sorted.bam"       "CTR_Apex_3_sorted.bam.bai"  
 [7] "CTR_Apex_4_sorted.bam"       "CTR_Apex_4_sorted.bam.bai"  
 [9] "CTR_Apex_5_sorted.bam"       "CTR_Apex_5_sorted.bam.bai"  
[11] "CTR_Apex_6_sorted.bam"       "CTR_Apex_6_sorted.bam.bai"  
[13] "CTR_Base_1_sorted.bam"       "CTR_Base_1_sorted.bam.bai"  
[15] "CTR_Base_2_sorted.bam"       "CTR_Base_2_sorted.bam.bai"  
[17] "CTR_Base_3_sorted.bam"       "CTR_Base_3_sorted.bam.bai"  
[19] "CTR_Base_4_sorted.bam"       "CTR_Base_4_sorted.bam.bai"  
[21] "CTR_Base_5_sorted.bam"       "CTR_Base_5_sorted.bam.bai"  
[23] "CTR_Base_6_sorted.bam"       "CTR_Base_6_sorted.bam.bai"  
[25] "Homo_sapiens.GRCh38.100.gtf" "IPF_Apex_1_sorted.bam"      
[27] "IPF_Apex_1_sorted.bam.bai"   "IPF_Apex_2_sorted.bam"      
[29] "IPF_Apex_2_sorted.bam.bai"   "IPF_Apex_3_sorted.bam"      
[31] "IPF_Apex_3_sorted.bam.bai"   "IPF_Apex_4_sorted.bam"      
[33] "IPF_Apex_4_sorted.bam.bai"   "IPF_Apex_5_sorted.bam"      
[35] "IPF_Apex_5_sorted.bam.bai"   "IPF_Apex_6_sorted.bam"      
[37] "IPF_Apex_6_sorted.bam.bai"   "IPF_Base_1_sorted.bam"      
[39] "IPF_Base_1_sorted.bam.bai"   "IPF_Base_2_sorted.bam"      
[41] "IPF_Base_2_sorted.bam.bai"   "IPF_Base_3_sorted.bam"      
[43] "IPF_Base_3_sorted.bam.bai"   "IPF_Base_4_sorted.bam"      
[45] "IPF_Base_4_sorted.bam.bai"   "IPF_Base_5_sorted.bam"      
[47] "IPF_Base_5_sorted.bam.bai"   "IPF_Base_6_sorted.bam"      
[49] "IPF_Base_6_sorted.bam.bai"   "sample_Apex.csv"            
[51] "sample_Base.csv"             "sample.csv"                 
[53] "sample_CTR.csv"              "sample_IPF.csv"             
> csvfile <- file.path(indir, "sample_IPF.csv")
> sampleTable <- read.csv(csvfile, row.names = 1)
> sampleTable
           SampleName CellType      SampleID PatientID
IPF_Apex_1 IPF_Apex_1     Apex IPF_Apex_018C     IPF_1
IPF_Apex_2 IPF_Apex_2     Apex IPF_Apex_023A     IPF_2
IPF_Apex_3 IPF_Apex_3     Apex IPF_Apex_027C     IPF_3
IPF_Apex_4 IPF_Apex_4     Apex IPF_Apex_028B     IPF_4
IPF_Apex_5 IPF_Apex_5     Apex IPF_Apex_029A     IPF_5
IPF_Apex_6 IPF_Apex_6     Apex IPF_Apex_043C     IPF_6
IPF_Base_1 IPF_Base_1     Base IPF_Base_018D     IPF_1
IPF_Base_2 IPF_Base_2     Base IPF_Base_023B     IPF_2
IPF_Base_3 IPF_Base_3     Base IPF_Base_027D     IPF_3
IPF_Base_4 IPF_Base_4     Base IPF_Base_028C     IPF_4
IPF_Base_5 IPF_Base_5     Base IPF_Base_029B     IPF_5
IPF_Base_6 IPF_Base_6     Base IPF_Base_043D     IPF_6
> filenames <- file.path(indir, paste0(sampleTable$SampleName,"_sorted.bam"))
> file.exists(filenames)
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> library(Rsamtools)
Loading required package: GenomeInfoDb
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: \u2018BiocGenerics\u2019

The following objects are masked from \u2018package:parallel\u2019:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from \u2018package:stats\u2019:

    IQR, mad, sd, var, xtabs

The following objects are masked from \u2018package:base\u2019:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: \u2018S4Vectors\u2019

The following object is masked from \u2018package:base\u2019:

    expand.grid

Loading required package: IRanges
Loading required package: GenomicRanges
Loading required package: Biostrings
Loading required package: XVector

Attaching package: \u2018Biostrings\u2019

The following object is masked from \u2018package:base\u2019:

    strsplit

> bamfiles <- BamFileList(filenames, yieldSize=2000000)
> seqinfo(bamfiles[1])
Seqinfo object with 194 sequences from an unspecified genome:
  seqnames   seqlengths isCircular genome
  1           248956422       <NA>   <NA>
  10          133797422       <NA>   <NA>
  11          135086622       <NA>   <NA>
  12          133275309       <NA>   <NA>
  13          114364328       <NA>   <NA>
  ...               ...        ...    ...
  KI270539.1        993       <NA>   <NA>
  KI270385.1        990       <NA>   <NA>
  KI270423.1        981       <NA>   <NA>
  KI270392.1        971       <NA>   <NA>
  KI270394.1        970       <NA>   <NA>
> library(GenomicFeatures)
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

> gtffile <- file.path(indir,"Homo_sapiens.GRCh38.100.gtf")
> txdb <- makeTxDbFromGFF(gtffile, format="gtf", circ_seqs=character())
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
Warning message:
In .get_cds_IDX(mcols0$type, mcols0$phase) :
  The "phase" metadata column contains non-NA values for features of type
  stop_codon. This information was ignored.
> txdb
TxDb object:
# Db type: TxDb
# Supporting package: GenomicFeatures
# Data source: /data2/zhenjun/lung_apex_base/Samtools/sorted/Homo_sapiens.GRCh38.100.gtf
# Organism: NA
# Taxonomy ID: NA
# miRBase build ID: NA
# Genome: NA
# transcript_nrow: 227954
# exon_nrow: 747775
# cds_nrow: 275213
# Db created by: GenomicFeatures package from Bioconductor
# Creation time: 2021-03-16 13:02:36 +0800 (Tue, 16 Mar 2021)
# GenomicFeatures version at creation time: 1.38.0
# RSQLite version at creation time: 2.1.2
# DBSCHEMAVERSION: 1.2
> ebg <- exonsBy(txdb, by="gene")
> ebg
GRangesList object of length 60683:
$ENSG00000000003
GRanges object with 20 ranges and 2 metadata columns:
       seqnames              ranges strand |   exon_id       exon_name
          <Rle>           <IRanges>  <Rle> | <integer>     <character>
   [1]        X 100627108-100629986      - |    739975 ENSE00001459322
   [2]        X 100627109-100629986      - |    739976 ENSE00003730948
   [3]        X 100630759-100630866      - |    739977 ENSE00000868868
   [4]        X 100632063-100632068      - |    739978 ENSE00003731560
   [5]        X 100632485-100632568      - |    739979 ENSE00000401072
   ...      ...                 ...    ... .       ...             ...
  [16]        X 100635558-100635746      - |    739990 ENSE00003733424
  [17]        X 100636191-100636689      - |    739991 ENSE00001886883
  [18]        X 100636608-100636806      - |    739992 ENSE00001855382
  [19]        X 100636793-100637104      - |    739993 ENSE00001863395
  [20]        X 100639945-100639991      - |    739994 ENSE00001828996
  -------
  seqinfo: 47 sequences from an unspecified genome; no seqlengths

...
<60682 more elements>
> library(GenomicAlignments)
Loading required package: SummarizedExperiment
Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: \u2018matrixStats\u2019

The following objects are masked from \u2018package:Biobase\u2019:

    anyMissing, rowMedians

Loading required package: BiocParallel

Attaching package: \u2018DelayedArray\u2019

The following objects are masked from \u2018package:matrixStats\u2019:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following objects are masked from \u2018package:base\u2019:

    aperm, apply, rowsum

> library(BiocParallel)
> register(SerialParam())
> se <- summarizeOverlaps(features=ebg, reads=bamfiles, mode="Union", singleEnd=TRUE, ignore.strand=TRUE)
> se
class: RangedSummarizedExperiment 
dim: 60683 12 
metadata(0):
assays(1): counts
rownames(60683): ENSG00000000003 ENSG00000000005 ... ENSG00000288603
  ENSG00000288604
rowData names(0):
colnames(12): IPF_Apex_1_sorted.bam IPF_Apex_2_sorted.bam ...
  IPF_Base_5_sorted.bam IPF_Base_6_sorted.bam
colData names(0):
> dim(se)
[1] 60683    12
> assayNames(se)
[1] "counts"
> head(assay(se), 3)
                IPF_Apex_1_sorted.bam IPF_Apex_2_sorted.bam
ENSG00000000003                  1099                   519
ENSG00000000005                     0                     0
ENSG00000000419                  1181                  1022
                IPF_Apex_3_sorted.bam IPF_Apex_4_sorted.bam
ENSG00000000003                   695                   988
ENSG00000000005                     0                     0
ENSG00000000419                  1310                  1236
                IPF_Apex_5_sorted.bam IPF_Apex_6_sorted.bam
ENSG00000000003                   727                   954
ENSG00000000005                     0                     0
ENSG00000000419                  1240                  1392
                IPF_Base_1_sorted.bam IPF_Base_2_sorted.bam
ENSG00000000003                  1544                   938
ENSG00000000005                     0                     0
ENSG00000000419                  1066                   753
                IPF_Base_3_sorted.bam IPF_Base_4_sorted.bam
ENSG00000000003                   576                  1315
ENSG00000000005                     0                     0
ENSG00000000419                  1499                  1030
                IPF_Base_5_sorted.bam IPF_Base_6_sorted.bam
ENSG00000000003                   909                   706
ENSG00000000005                     0                     0
ENSG00000000419                  1266                  1226
> setwd("/data2/zhenjun/lung_apex_base/Graph/IPF")
> write.csv(assay(se), file = "rawcounts_IPF.csv")
> colSums(assay(se))
IPF_Apex_1_sorted.bam IPF_Apex_2_sorted.bam IPF_Apex_3_sorted.bam 
             37561747              29848445              30195336 
IPF_Apex_4_sorted.bam IPF_Apex_5_sorted.bam IPF_Apex_6_sorted.bam 
             33194798              26265524              37972967 
IPF_Base_1_sorted.bam IPF_Base_2_sorted.bam IPF_Base_3_sorted.bam 
             36683735              24893351              33196422 
IPF_Base_4_sorted.bam IPF_Base_5_sorted.bam IPF_Base_6_sorted.bam 
             33005974              32417767              32379030 
> rowRanges(se)
GRangesList object of length 60683:
$ENSG00000000003
GRanges object with 20 ranges and 2 metadata columns:
       seqnames              ranges strand |   exon_id       exon_name
          <Rle>           <IRanges>  <Rle> | <integer>     <character>
   [1]        X 100627108-100629986      - |    739975 ENSE00001459322
   [2]        X 100627109-100629986      - |    739976 ENSE00003730948
   [3]        X 100630759-100630866      - |    739977 ENSE00000868868
   [4]        X 100632063-100632068      - |    739978 ENSE00003731560
   [5]        X 100632485-100632568      - |    739979 ENSE00000401072
   ...      ...                 ...    ... .       ...             ...
  [16]        X 100635558-100635746      - |    739990 ENSE00003733424
  [17]        X 100636191-100636689      - |    739991 ENSE00001886883
  [18]        X 100636608-100636806      - |    739992 ENSE00001855382
  [19]        X 100636793-100637104      - |    739993 ENSE00001863395
  [20]        X 100639945-100639991      - |    739994 ENSE00001828996
  -------
  seqinfo: 47 sequences from an unspecified genome; no seqlengths

...
<60682 more elements>
> str(metadata(rowRanges(se)))
List of 1
 $ genomeInfo:List of 15
  ..$ Db type                                 : chr "TxDb"
  ..$ Supporting package                      : chr "GenomicFeatures"
  ..$ Data source                             : chr "/data2/zhenjun/lung_apex_base/Samtools/sorted/Homo_sapiens.GRCh38.100.gtf"
  ..$ Organism                                : chr NA
  ..$ Taxonomy ID                             : chr NA
  ..$ miRBase build ID                        : chr NA
  ..$ Genome                                  : chr NA
  ..$ transcript_nrow                         : chr "227954"
  ..$ exon_nrow                               : chr "747775"
  ..$ cds_nrow                                : chr "275213"
  ..$ Db created by                           : chr "GenomicFeatures package from Bioconductor"
  ..$ Creation time                           : chr "2021-03-16 13:02:36 +0800 (Tue, 16 Mar 2021)"
  ..$ GenomicFeatures version at creation time: chr "1.38.0"
  ..$ RSQLite version at creation time        : chr "2.1.2"
  ..$ DBSCHEMAVERSION                         : chr "1.2"
> colData(se)
DataFrame with 12 rows and 0 columns
> colData(se) <- DataFrame(sampleTable)
> colData(se)
DataFrame with 12 rows and 4 columns
           SampleName CellType      SampleID PatientID
             <factor> <factor>      <factor>  <factor>
IPF_Apex_1 IPF_Apex_1     Apex IPF_Apex_018C     IPF_1
IPF_Apex_2 IPF_Apex_2     Apex IPF_Apex_023A     IPF_2
IPF_Apex_3 IPF_Apex_3     Apex IPF_Apex_027C     IPF_3
IPF_Apex_4 IPF_Apex_4     Apex IPF_Apex_028B     IPF_4
IPF_Apex_5 IPF_Apex_5     Apex IPF_Apex_029A     IPF_5
...               ...      ...           ...       ...
IPF_Base_2 IPF_Base_2     Base IPF_Base_023B     IPF_2
IPF_Base_3 IPF_Base_3     Base IPF_Base_027D     IPF_3
IPF_Base_4 IPF_Base_4     Base IPF_Base_028C     IPF_4
IPF_Base_5 IPF_Base_5     Base IPF_Base_029B     IPF_5
IPF_Base_6 IPF_Base_6     Base IPF_Base_043D     IPF_6
> round( colSums(assay(se)) / 1e6, 1 )
IPF_Apex_1 IPF_Apex_2 IPF_Apex_3 IPF_Apex_4 IPF_Apex_5 IPF_Apex_6 IPF_Base_1 
      37.6       29.8       30.2       33.2       26.3       38.0       36.7 
IPF_Base_2 IPF_Base_3 IPF_Base_4 IPF_Base_5 IPF_Base_6 
      24.9       33.2       33.0       32.4       32.4 
> library(DESeq2)
> dds <- DESeqDataSet(se, design = ~ PatientID + CellType)
> dds
class: DESeqDataSet 
dim: 60683 12 
metadata(1): version
assays(1): counts
rownames(60683): ENSG00000000003 ENSG00000000005 ... ENSG00000288603
  ENSG00000288604
rowData names(0):
colnames(12): IPF_Apex_1 IPF_Apex_2 ... IPF_Base_5 IPF_Base_6
colData names(4): SampleName CellType SampleID PatientID
> dds$CellType <- relevel(dds$CellType, ref = "Apex")
> dds$CellType
 [1] Apex Apex Apex Apex Apex Apex Base Base Base Base Base Base
Levels: Apex Base
> nrow(dds)
[1] 60683
> dds <- dds[ rowSums(counts(dds)) > 1, ]
> nrow(dds)
[1] 35652
> pdf("IPF count distribution boxplots.pdf")
> librarySizes <- colSums(assay(dds))
> barplot(librarySizes, names=names(librarySizes), las=2, main="Barplot of library sizes")
> abline(lty=2)
> dev.off()
null device 
          1 
> logcounts <- log2(assay(dds) + 1)
> CellTypeCol <- as.numeric(factor(sampleTable$CellType)) + 1
> pdf("IPF log2 counts boxplots.pdf")
> boxplot(logcounts, xlab="", ylab="Log2(Counts)", las=2, col=CellTypeCol)
> abline(h=median(as.matrix(logcounts)), col="blue")
> dev.off()
null device 
          1 
> rld <- rlog(dds, blind = FALSE)
> head(assay(rld), 3)
                IPF_Apex_1 IPF_Apex_2 IPF_Apex_3 IPF_Apex_4 IPF_Apex_5
ENSG00000000003   9.884389   9.251864   9.511442   9.885515   9.750926
ENSG00000000419  10.063040  10.088403  10.307439  10.231692  10.439893
ENSG00000000457   8.465619   8.585635   8.262552   8.354341   8.074878
                IPF_Apex_6 IPF_Base_1 IPF_Base_2 IPF_Base_3 IPF_Base_4
ENSG00000000003   9.607278  10.308629  10.117237   9.284835  10.198952
ENSG00000000419  10.121982   9.994238   9.973827  10.431289  10.025691
ENSG00000000457   8.186370   8.579681   8.686099   8.130544   8.407687
                IPF_Base_5 IPF_Base_6
ENSG00000000003   9.766709   9.492697
ENSG00000000419  10.231298  10.197499
ENSG00000000457   8.144704   8.153630
> colData(rld)
DataFrame with 12 rows and 5 columns
           SampleName CellType      SampleID PatientID        sizeFactor
             <factor> <factor>      <factor>  <factor>         <numeric>
IPF_Apex_1 IPF_Apex_1     Apex IPF_Apex_018C     IPF_1  1.13115713705173
IPF_Apex_2 IPF_Apex_2     Apex IPF_Apex_023A     IPF_2 0.956507479282592
IPF_Apex_3 IPF_Apex_3     Apex IPF_Apex_027C     IPF_3  1.00551871270339
IPF_Apex_4 IPF_Apex_4     Apex IPF_Apex_028B     IPF_4  1.01583574468062
IPF_Apex_5 IPF_Apex_5     Apex IPF_Apex_029A     IPF_5 0.844503940426809
...               ...      ...           ...       ...               ...
IPF_Base_2 IPF_Base_2     Base IPF_Base_023B     IPF_2 0.783029262881909
IPF_Base_3 IPF_Base_3     Base IPF_Base_027D     IPF_3  1.02897217350025
IPF_Base_4 IPF_Base_4     Base IPF_Base_028C     IPF_4  1.02090037799549
IPF_Base_5 IPF_Base_5     Base IPF_Base_029B     IPF_5  1.04086548599566
IPF_Base_6 IPF_Base_6     Base IPF_Base_043D     IPF_6  1.03924354918706
> pdf("IPF rlog counts boxplots.pdf")
> boxplot(assay(rld), xlab="", ylab="rlog(Counts)", las=2, col=CellTypeCol)
> abline(h=median(as.matrix(assay(rld))), col="blue")
> dev.off()
null device 
          1 
> sampleDists <- dist(t(assay(rld)))
> sampleDists
           IPF_Apex_1 IPF_Apex_2 IPF_Apex_3 IPF_Apex_4 IPF_Apex_5 IPF_Apex_6
IPF_Apex_2   85.37928                                                       
IPF_Apex_3   63.68299   90.65000                                            
IPF_Apex_4   47.50286   90.71825   61.54731                                 
IPF_Apex_5   58.65819   97.77471   47.71974   51.25312                      
IPF_Apex_6   68.08678   89.48908   46.62362   62.77162   55.09848           
IPF_Base_1   61.44822   89.70061   90.34351   77.75159   90.84048   91.68421
IPF_Base_2   84.64031   76.85140  106.13580   97.47150  108.25826  105.22899
IPF_Base_3   78.84067  112.18797   65.28842   75.43264   62.08214   72.49715
IPF_Base_4   70.87785   94.13456   90.21430   79.64992   92.39920   87.01755
IPF_Base_5   84.21103  115.06942   68.73063   78.29980   61.63944   72.72524
IPF_Base_6   81.22547  107.63951   58.25282   71.12730   60.81692   55.39032
           IPF_Base_1 IPF_Base_2 IPF_Base_3 IPF_Base_4 IPF_Base_5
IPF_Apex_2                                                       
IPF_Apex_3                                                       
IPF_Apex_4                                                       
IPF_Apex_5                                                       
IPF_Apex_6                                                       
IPF_Base_1                                                       
IPF_Base_2   62.28750                                            
IPF_Base_3  104.24744  119.46923                                 
IPF_Base_4   50.49307   67.03074  103.02498                      
IPF_Base_5  111.52966  119.44698   65.61428  109.01347           
IPF_Base_6  111.82084  122.89868   70.42191  108.48830   59.40072
> library(pheatmap)
> library(RColorBrewer)
> pdf("IPF Heatmap of sample-to-sample distances using the rlog values.pdf")
> sampleDistMatrix <- as.matrix( sampleDists )
> rownames(sampleDistMatrix) <- paste( rld$SampleName, sep = " - " )
> colnames(sampleDistMatrix) <- paste( rld$SampleName, sep = " - " )
> colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
> pheatmap(sampleDistMatrix, clustering_distance_rows = sampleDists, clustering_distance_cols = sampleDists, col = colors)
> dev.off()
null device 
          1 
> library(ggplot2)
> pcaData <- plotPCA(rld, intgroup = c("CellType", "SampleName"), returnData = TRUE)
> pcaData
                  PC1        PC2           group CellType SampleName       name
IPF_Apex_1 -10.774897   4.429007 Apex:IPF_Apex_1     Apex IPF_Apex_1 IPF_Apex_1
IPF_Apex_2  -7.322846  14.946161 Apex:IPF_Apex_2     Apex IPF_Apex_2 IPF_Apex_2
IPF_Apex_3  15.565202   4.169492 Apex:IPF_Apex_3     Apex IPF_Apex_3 IPF_Apex_3
IPF_Apex_4  -3.479860  10.216498 Apex:IPF_Apex_4     Apex IPF_Apex_4 IPF_Apex_4
IPF_Apex_5  11.587771   3.899974 Apex:IPF_Apex_5     Apex IPF_Apex_5 IPF_Apex_5
IPF_Apex_6  16.602899  10.520723 Apex:IPF_Apex_6     Apex IPF_Apex_6 IPF_Apex_6
IPF_Base_1 -32.617369  -2.437392 Base:IPF_Base_1     Base IPF_Base_1 IPF_Base_1
IPF_Base_2 -33.513235  -9.473068 Base:IPF_Base_2     Base IPF_Base_2 IPF_Base_2
IPF_Base_3  20.076187 -14.547166 Base:IPF_Base_3     Base IPF_Base_3 IPF_Base_3
IPF_Base_4 -26.955980  -5.806052 Base:IPF_Base_4     Base IPF_Base_4 IPF_Base_4
IPF_Base_5  23.123664 -19.105421 Base:IPF_Base_5     Base IPF_Base_5 IPF_Base_5
IPF_Base_6  27.708462   3.187244 Base:IPF_Base_6     Base IPF_Base_6 IPF_Base_6
> percentVar <- round(100 * attr(pcaData, "percentVar"))
> pdf("IPF PCA plot using the rlog values with custom ggplot2 code.pdf")
> ggplot(pcaData, aes(x = PC1, y = PC2, color = SampleName, shape = CellType)) + geom_point(size =3) + xlab(paste0("PC1: ", percentVar[1], "% variance")) + ylab(paste0("PC2: ", percentVar[2], "% variance")) + coord_fixed()
> dev.off()
null device 
          1 
> dds <- DESeq(dds)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
final dispersion estimates
fitting model and testing
> res <- results(dds)
> res
log2 fold change (MLE): CellType Base vs Apex 
Wald test p-value: CellType Base vs Apex 
DataFrame with 35652 rows and 6 columns
                         baseMean       log2FoldChange             lfcSE
                        <numeric>            <numeric>         <numeric>
ENSG00000000003  900.995048861944    0.274572470536805 0.218113665659691
ENSG00000000419  1167.13262273673  -0.0870599829796065 0.122842449375669
ENSG00000000457  328.551227367612   0.0403073096246747 0.125526388977915
ENSG00000000460  258.797534404146   -0.116104924161294 0.385388554750233
ENSG00000000938 0.611464346836958    0.602221841343594  2.67320467669664
...                           ...                  ...               ...
ENSG00000288596  82.4200289527011   -0.374828369365065 0.287133668257103
ENSG00000288597  3.76217018284374 -0.00465452637469805 0.892194261765208
ENSG00000288598  5.38223445848675    0.241110590208377 0.677590137015358
ENSG00000288602 0.131906041749891   -0.585982007727865  3.10440301629503
ENSG00000288603 0.576403685870969    0.998538085508474  3.06604176882643
                                stat            pvalue              padj
                           <numeric>         <numeric>         <numeric>
ENSG00000000003      1.2588503783399 0.208084379852194 0.952892954444803
ENSG00000000419   -0.708712529114143 0.478502888154225 0.999820638085544
ENSG00000000457    0.321106262618344 0.748129864538742 0.999820638085544
ENSG00000000460   -0.301267182769713 0.763210763445056 0.999820638085544
ENSG00000000938    0.225280857314591 0.821760790586829                NA
...                              ...               ...               ...
ENSG00000288596    -1.30541420530817 0.191751843877153  0.93721406838833
ENSG00000288597 -0.00521694273788431 0.995837500816295                NA
ENSG00000288598    0.355835448358824 0.721963800338702 0.999820638085544
ENSG00000288602    -0.18875835535916 0.850282212625721                NA
ENSG00000288603    0.325676608734094 0.744669043704608                NA
> summary(res)

out of 35652 with nonzero total read count
adjusted p-value < 0.1
LFC > 0 (up)       : 277, 0.78%
LFC < 0 (down)     : 324, 0.91%
outliers [1]       : 0, 0%
low counts [2]     : 15207, 43%
(mean count < 5)
[1] see 'cooksCutoff' argument of ?results
[2] see 'independentFiltering' argument of ?results

> sum(res$padj < 0.1, na.rm=TRUE)
[1] 601
> res05 <- results(dds, alpha=0.05)
> summary(res05)

out of 35652 with nonzero total read count
adjusted p-value < 0.05
LFC > 0 (up)       : 200, 0.56%
LFC < 0 (down)     : 233, 0.65%
outliers [1]       : 0, 0%
low counts [2]     : 15898, 45%
(mean count < 6)
[1] see 'cooksCutoff' argument of ?results
[2] see 'independentFiltering' argument of ?results

> sum(res05$padj < 0.05, na.rm=TRUE)
[1] 433
> library(AnnotationDbi)
> library(org.Hs.eg.db)

> columns(org.Hs.eg.db)
 [1] "ACCNUM"       "ALIAS"        "ENSEMBL"      "ENSEMBLPROT"  "ENSEMBLTRANS"
 [6] "ENTREZID"     "ENZYME"       "EVIDENCE"     "EVIDENCEALL"  "GENENAME"    
[11] "GO"           "GOALL"        "IPI"          "MAP"          "OMIM"        
[16] "ONTOLOGY"     "ONTOLOGYALL"  "PATH"         "PFAM"         "PMID"        
[21] "PROSITE"      "REFSEQ"       "SYMBOL"       "UCSCKG"       "UNIGENE"     
[26] "UNIPROT"     
> res$symbol <- mapIds(org.Hs.eg.db, keys=row.names(res), column="SYMBOL", keytype="ENSEMBL", multiVals="first")
'select()' returned 1:many mapping between keys and columns
> res$entrez <- mapIds(org.Hs.eg.db, keys=row.names(res), column="ENTREZID", keytype="ENSEMBL", multiVals="first")
'select()' returned 1:many mapping between keys and columns
> res$genename <- mapIds(org.Hs.eg.db, keys=row.names(res), column="GENENAME", keytype="ENSEMBL", multiVals="first")
'select()' returned 1:many mapping between keys and columns
> resOrdered <- res[order(res$pvalue),]
> head(resOrdered)
log2 fold change (MLE): CellType Base vs Apex 
Wald test p-value: CellType Base vs Apex 
DataFrame with 6 rows and 9 columns
                        baseMean    log2FoldChange             lfcSE
                       <numeric>         <numeric>         <numeric>
ENSG00000163536  193.25699090769 -1.51935652174296 0.187347068537747
ENSG00000179348 167.215078405996  1.83930171168492 0.231167033674417
ENSG00000111348 791.214277905171 -2.32868471099098 0.295454660866374
ENSG00000014257 744.084928880931 -2.98382268395172 0.396171329425455
ENSG00000170439  81.172734163023 -1.93987469325923 0.268917098653299
ENSG00000126733 50.0757930396371 -4.44031446855197 0.634378037490355
                             stat               pvalue                 padj
                        <numeric>            <numeric>            <numeric>
ENSG00000163536 -8.10984945535368 5.06825157513183e-16  1.0362040345357e-11
ENSG00000179348  7.95659174428584 1.76843016753479e-15 1.80777773876244e-11
ENSG00000111348 -7.88169901995278 3.22959201572467e-15 2.20096695871636e-11
ENSG00000014257 -7.53164719990966 5.01041844815339e-14  2.5609501293124e-10
ENSG00000170439 -7.21365321496426 5.44703710300101e-13 2.22729347141711e-09
ENSG00000126733 -6.99947697766804 2.56919792601091e-12 8.75454193288217e-09
                     symbol      entrez                                genename
                <character> <character>                             <character>
ENSG00000163536    SERPINI1        5274                serpin family I member 1
ENSG00000179348       GATA2        2624                  GATA binding protein 2
ENSG00000111348     ARHGDIB         397     Rho GDP dissociation inhibitor beta
ENSG00000014257        ACPP          55              acid phosphatase, prostate
ENSG00000170439     METTL7B      196410               methyltransferase like 7B
ENSG00000126733       DACH2      117154 dachshund family transcription factor 2
> resOrderedDF <- as.data.frame(resOrdered)
> write.csv(resOrderedDF, file = "IPF_result_all.csv")
> resSig <- subset(resOrdered, padj < 0.05 & abs(log2FoldChange) > 1)
> write.csv(as.data.frame(resSig), file = "IPF_result_sig.csv")
> library(genefilter)

Attaching package: \u2018genefilter\u2019

The following objects are masked from \u2018package:matrixStats\u2019:

    rowSds, rowVars

> topVarGenes <- head(order(rowVars(assay(rld)), decreasing = TRUE), 1000)
> mat <- assay(rld)[ topVarGenes, ]
> mat <- mat - rowMeans(mat)
> anno <- as.data.frame(colData(rld)[, c("CellType", "SampleName")])
> pdf("IPF Top 1000 variable genes across samples pheatmap.pdf")
> pheatmap(mat, fontsize_row = 4, scale = "row", color = colorRampPalette(c("green","black","red"))(1000), annotation_col = anno)
> dev.off()
null device 
          1 
> matSig <- assay(rld[row.names(resSig)])
> pdf("IPF significant genes across samples pheatmap.pdf")
> pheatmap(matSig, fontsize_row = 4, scale = "row", color = colorRampPalette(rev(brewer.pal(11, "RdBu")))(255), annotation_col = anno)
> dev.off()
null device 
          1 
> library(apeglm)
> pdf("IPF mean of normalizad counts.pdf")
> plotMA(res, ylim=c(-5,5))
> dev.off()
null device 
          1 
> library(ggplot2)
> library(ggrepel)
> resdata <- as.data.frame(res)
> resdata <- na.omit(resdata)
> resdata$Threshold = as.factor(ifelse(resdata$padj < 0.05 & abs(resdata$log2FoldChange) > 1, ifelse(resdata$log2FoldChange> 1,'Up','Down'),'Nonsignificant'))
> p1 <- ggplot(resdata, aes(x = log2FoldChange, y = -log10(padj), color = Threshold, label=symbol)) + geom_point(size = 1.5, alpha = 0.4) + labs(x = "log2FoldChange", y = "-log10(padj)") + geom_text_repel(data = subset(resdata, resdata$padj < 0.0001 & abs(resdata$log2FoldChange)>= 4), aes(label = symbol), size = 3, box.padding = unit(0.5, "lines"), point.padding = unit(0.8, "lines"), segment.color = "black", show.legend = FALSE )
> p2 <- p1 + geom_vline(xintercept = c(-1, 1), color = 'black', linetype = 2, size = 0.5) +  geom_hline(yintercept = -log10(0.05), color = 'black', linetype = 2, size = 0.5)
> pdf("IPF volcano plot.pdf")
> p2
> dev.off()
null device 
          1

> indir <- file.path("/data2/zhenjun/lung_apex_base/Samtools/sorted")
> list.files(indir) 
 [1] "CTR_Apex_1_sorted.bam"       "CTR_Apex_1_sorted.bam.bai"  
 [3] "CTR_Apex_2_sorted.bam"       "CTR_Apex_2_sorted.bam.bai"  
 [5] "CTR_Apex_3_sorted.bam"       "CTR_Apex_3_sorted.bam.bai"  
 [7] "CTR_Apex_4_sorted.bam"       "CTR_Apex_4_sorted.bam.bai"  
 [9] "CTR_Apex_5_sorted.bam"       "CTR_Apex_5_sorted.bam.bai"  
[11] "CTR_Apex_6_sorted.bam"       "CTR_Apex_6_sorted.bam.bai"  
[13] "CTR_Base_1_sorted.bam"       "CTR_Base_1_sorted.bam.bai"  
[15] "CTR_Base_2_sorted.bam"       "CTR_Base_2_sorted.bam.bai"  
[17] "CTR_Base_3_sorted.bam"       "CTR_Base_3_sorted.bam.bai"  
[19] "CTR_Base_4_sorted.bam"       "CTR_Base_4_sorted.bam.bai"  
[21] "CTR_Base_5_sorted.bam"       "CTR_Base_5_sorted.bam.bai"  
[23] "CTR_Base_6_sorted.bam"       "CTR_Base_6_sorted.bam.bai"  
[25] "Homo_sapiens.GRCh38.100.gtf" "IPF_Apex_1_sorted.bam"      
[27] "IPF_Apex_1_sorted.bam.bai"   "IPF_Apex_2_sorted.bam"      
[29] "IPF_Apex_2_sorted.bam.bai"   "IPF_Apex_3_sorted.bam"      
[31] "IPF_Apex_3_sorted.bam.bai"   "IPF_Apex_4_sorted.bam"      
[33] "IPF_Apex_4_sorted.bam.bai"   "IPF_Apex_5_sorted.bam"      
[35] "IPF_Apex_5_sorted.bam.bai"   "IPF_Apex_6_sorted.bam"      
[37] "IPF_Apex_6_sorted.bam.bai"   "IPF_Base_1_sorted.bam"      
[39] "IPF_Base_1_sorted.bam.bai"   "IPF_Base_2_sorted.bam"      
[41] "IPF_Base_2_sorted.bam.bai"   "IPF_Base_3_sorted.bam"      
[43] "IPF_Base_3_sorted.bam.bai"   "IPF_Base_4_sorted.bam"      
[45] "IPF_Base_4_sorted.bam.bai"   "IPF_Base_5_sorted.bam"      
[47] "IPF_Base_5_sorted.bam.bai"   "IPF_Base_6_sorted.bam"      
[49] "IPF_Base_6_sorted.bam.bai"   "sample_Apex.csv"            
[51] "sample_Base.csv"             "sample.csv"                 
[53] "sample_CTR.csv"              "sample_IPF.csv"             
> csvfile <- file.path(indir, "sample_IPF.csv")
> sampleTable <- read.csv(csvfile, row.names = 1)
> sampleTable
           SampleName CellType      SampleID PatientID
IPF_Apex_1 IPF_Apex_1     Apex IPF_Apex_018C     IPF_1
IPF_Apex_2 IPF_Apex_2     Apex IPF_Apex_023A     IPF_2
IPF_Apex_3 IPF_Apex_3     Apex IPF_Apex_027C     IPF_3
IPF_Apex_4 IPF_Apex_4     Apex IPF_Apex_028B     IPF_4
IPF_Apex_5 IPF_Apex_5     Apex IPF_Apex_029A     IPF_5
IPF_Apex_6 IPF_Apex_6     Apex IPF_Apex_043C     IPF_6
IPF_Base_1 IPF_Base_1     Base IPF_Base_018D     IPF_1
IPF_Base_2 IPF_Base_2     Base IPF_Base_023B     IPF_2
IPF_Base_3 IPF_Base_3     Base IPF_Base_027D     IPF_3
IPF_Base_4 IPF_Base_4     Base IPF_Base_028C     IPF_4
IPF_Base_5 IPF_Base_5     Base IPF_Base_029B     IPF_5
IPF_Base_6 IPF_Base_6     Base IPF_Base_043D     IPF_6
> filenames <- file.path(indir, paste0(sampleTable$SampleName,"_sorted.bam"))
> file.exists(filenames)
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> library(Rsamtools)
Loading required package: GenomeInfoDb
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: \u2018BiocGenerics\u2019

The following objects are masked from \u2018package:parallel\u2019:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from \u2018package:stats\u2019:

    IQR, mad, sd, var, xtabs

The following objects are masked from \u2018package:base\u2019:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: \u2018S4Vectors\u2019

The following object is masked from \u2018package:base\u2019:

    expand.grid

Loading required package: IRanges
Loading required package: GenomicRanges
Loading required package: Biostrings
Loading required package: XVector

Attaching package: \u2018Biostrings\u2019

The following object is masked from \u2018package:base\u2019:

    strsplit

> bamfiles <- BamFileList(filenames, yieldSize=2000000)
> seqinfo(bamfiles[1])
Seqinfo object with 194 sequences from an unspecified genome:
  seqnames   seqlengths isCircular genome
  1           248956422       <NA>   <NA>
  10          133797422       <NA>   <NA>
  11          135086622       <NA>   <NA>
  12          133275309       <NA>   <NA>
  13          114364328       <NA>   <NA>
  ...               ...        ...    ...
  KI270539.1        993       <NA>   <NA>
  KI270385.1        990       <NA>   <NA>
  KI270423.1        981       <NA>   <NA>
  KI270392.1        971       <NA>   <NA>
  KI270394.1        970       <NA>   <NA>
> library(GenomicFeatures)
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

> gtffile <- file.path(indir,"Homo_sapiens.GRCh38.100.gtf")
> txdb <- makeTxDbFromGFF(gtffile, format="gtf", circ_seqs=character())
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
Warning message:
In .get_cds_IDX(mcols0$type, mcols0$phase) :
  The "phase" metadata column contains non-NA values for features of type
  stop_codon. This information was ignored.
> txdb
TxDb object:
# Db type: TxDb
# Supporting package: GenomicFeatures
# Data source: /data2/zhenjun/lung_apex_base/Samtools/sorted/Homo_sapiens.GRCh38.100.gtf
# Organism: NA
# Taxonomy ID: NA
# miRBase build ID: NA
# Genome: NA
# transcript_nrow: 227954
# exon_nrow: 747775
# cds_nrow: 275213
# Db created by: GenomicFeatures package from Bioconductor
# Creation time: 2021-03-16 13:02:36 +0800 (Tue, 16 Mar 2021)
# GenomicFeatures version at creation time: 1.38.0
# RSQLite version at creation time: 2.1.2
# DBSCHEMAVERSION: 1.2
> ebg <- exonsBy(txdb, by="gene")
> ebg
GRangesList object of length 60683:
$ENSG00000000003
GRanges object with 20 ranges and 2 metadata columns:
       seqnames              ranges strand |   exon_id       exon_name
          <Rle>           <IRanges>  <Rle> | <integer>     <character>
   [1]        X 100627108-100629986      - |    739975 ENSE00001459322
   [2]        X 100627109-100629986      - |    739976 ENSE00003730948
   [3]        X 100630759-100630866      - |    739977 ENSE00000868868
   [4]        X 100632063-100632068      - |    739978 ENSE00003731560
   [5]        X 100632485-100632568      - |    739979 ENSE00000401072
   ...      ...                 ...    ... .       ...             ...
  [16]        X 100635558-100635746      - |    739990 ENSE00003733424
  [17]        X 100636191-100636689      - |    739991 ENSE00001886883
  [18]        X 100636608-100636806      - |    739992 ENSE00001855382
  [19]        X 100636793-100637104      - |    739993 ENSE00001863395
  [20]        X 100639945-100639991      - |    739994 ENSE00001828996
  -------
  seqinfo: 47 sequences from an unspecified genome; no seqlengths

...
<60682 more elements>
> library(GenomicAlignments)
Loading required package: SummarizedExperiment
Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: \u2018matrixStats\u2019

The following objects are masked from \u2018package:Biobase\u2019:

    anyMissing, rowMedians

Loading required package: BiocParallel

Attaching package: \u2018DelayedArray\u2019

The following objects are masked from \u2018package:matrixStats\u2019:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following objects are masked from \u2018package:base\u2019:

    aperm, apply, rowsum

> library(BiocParallel)
> register(SerialParam())
> se <- summarizeOverlaps(features=ebg, reads=bamfiles, mode="Union", singleEnd=TRUE, ignore.strand=TRUE)
> se
class: RangedSummarizedExperiment 
dim: 60683 12 
metadata(0):
assays(1): counts
rownames(60683): ENSG00000000003 ENSG00000000005 ... ENSG00000288603
  ENSG00000288604
rowData names(0):
colnames(12): IPF_Apex_1_sorted.bam IPF_Apex_2_sorted.bam ...
  IPF_Base_5_sorted.bam IPF_Base_6_sorted.bam
colData names(0):
> dim(se)
[1] 60683    12
> assayNames(se)
[1] "counts"
> head(assay(se), 3)
                IPF_Apex_1_sorted.bam IPF_Apex_2_sorted.bam
ENSG00000000003                  1099                   519
ENSG00000000005                     0                     0
ENSG00000000419                  1181                  1022
                IPF_Apex_3_sorted.bam IPF_Apex_4_sorted.bam
ENSG00000000003                   695                   988
ENSG00000000005                     0                     0
ENSG00000000419                  1310                  1236
                IPF_Apex_5_sorted.bam IPF_Apex_6_sorted.bam
ENSG00000000003                   727                   954
ENSG00000000005                     0                     0
ENSG00000000419                  1240                  1392
                IPF_Base_1_sorted.bam IPF_Base_2_sorted.bam
ENSG00000000003                  1544                   938
ENSG00000000005                     0                     0
ENSG00000000419                  1066                   753
                IPF_Base_3_sorted.bam IPF_Base_4_sorted.bam
ENSG00000000003                   576                  1315
ENSG00000000005                     0                     0
ENSG00000000419                  1499                  1030
                IPF_Base_5_sorted.bam IPF_Base_6_sorted.bam
ENSG00000000003                   909                   706
ENSG00000000005                     0                     0
ENSG00000000419                  1266                  1226
> setwd("/data2/zhenjun/lung_apex_base/Graph/IPF")
> write.csv(assay(se), file = "rawcounts_IPF.csv")
> colSums(assay(se))
IPF_Apex_1_sorted.bam IPF_Apex_2_sorted.bam IPF_Apex_3_sorted.bam 
             37561747              29848445              30195336 
IPF_Apex_4_sorted.bam IPF_Apex_5_sorted.bam IPF_Apex_6_sorted.bam 
             33194798              26265524              37972967 
IPF_Base_1_sorted.bam IPF_Base_2_sorted.bam IPF_Base_3_sorted.bam 
             36683735              24893351              33196422 
IPF_Base_4_sorted.bam IPF_Base_5_sorted.bam IPF_Base_6_sorted.bam 
             33005974              32417767              32379030 
> rowRanges(se)
GRangesList object of length 60683:
$ENSG00000000003
GRanges object with 20 ranges and 2 metadata columns:
       seqnames              ranges strand |   exon_id       exon_name
          <Rle>           <IRanges>  <Rle> | <integer>     <character>
   [1]        X 100627108-100629986      - |    739975 ENSE00001459322
   [2]        X 100627109-100629986      - |    739976 ENSE00003730948
   [3]        X 100630759-100630866      - |    739977 ENSE00000868868
   [4]        X 100632063-100632068      - |    739978 ENSE00003731560
   [5]        X 100632485-100632568      - |    739979 ENSE00000401072
   ...      ...                 ...    ... .       ...             ...
  [16]        X 100635558-100635746      - |    739990 ENSE00003733424
  [17]        X 100636191-100636689      - |    739991 ENSE00001886883
  [18]        X 100636608-100636806      - |    739992 ENSE00001855382
  [19]        X 100636793-100637104      - |    739993 ENSE00001863395
  [20]        X 100639945-100639991      - |    739994 ENSE00001828996
  -------
  seqinfo: 47 sequences from an unspecified genome; no seqlengths

...
<60682 more elements>
> str(metadata(rowRanges(se)))
List of 1
 $ genomeInfo:List of 15
  ..$ Db type                                 : chr "TxDb"
  ..$ Supporting package                      : chr "GenomicFeatures"
  ..$ Data source                             : chr "/data2/zhenjun/lung_apex_base/Samtools/sorted/Homo_sapiens.GRCh38.100.gtf"
  ..$ Organism                                : chr NA
  ..$ Taxonomy ID                             : chr NA
  ..$ miRBase build ID                        : chr NA
  ..$ Genome                                  : chr NA
  ..$ transcript_nrow                         : chr "227954"
  ..$ exon_nrow                               : chr "747775"
  ..$ cds_nrow                                : chr "275213"
  ..$ Db created by                           : chr "GenomicFeatures package from Bioconductor"
  ..$ Creation time                           : chr "2021-03-16 13:02:36 +0800 (Tue, 16 Mar 2021)"
  ..$ GenomicFeatures version at creation time: chr "1.38.0"
  ..$ RSQLite version at creation time        : chr "2.1.2"
  ..$ DBSCHEMAVERSION                         : chr "1.2"
> colData(se)
DataFrame with 12 rows and 0 columns
> colData(se) <- DataFrame(sampleTable)
> colData(se)
DataFrame with 12 rows and 4 columns
           SampleName CellType      SampleID PatientID
             <factor> <factor>      <factor>  <factor>
IPF_Apex_1 IPF_Apex_1     Apex IPF_Apex_018C     IPF_1
IPF_Apex_2 IPF_Apex_2     Apex IPF_Apex_023A     IPF_2
IPF_Apex_3 IPF_Apex_3     Apex IPF_Apex_027C     IPF_3
IPF_Apex_4 IPF_Apex_4     Apex IPF_Apex_028B     IPF_4
IPF_Apex_5 IPF_Apex_5     Apex IPF_Apex_029A     IPF_5
...               ...      ...           ...       ...
IPF_Base_2 IPF_Base_2     Base IPF_Base_023B     IPF_2
IPF_Base_3 IPF_Base_3     Base IPF_Base_027D     IPF_3
IPF_Base_4 IPF_Base_4     Base IPF_Base_028C     IPF_4
IPF_Base_5 IPF_Base_5     Base IPF_Base_029B     IPF_5
IPF_Base_6 IPF_Base_6     Base IPF_Base_043D     IPF_6
> round( colSums(assay(se)) / 1e6, 1 )
IPF_Apex_1 IPF_Apex_2 IPF_Apex_3 IPF_Apex_4 IPF_Apex_5 IPF_Apex_6 IPF_Base_1 
      37.6       29.8       30.2       33.2       26.3       38.0       36.7 
IPF_Base_2 IPF_Base_3 IPF_Base_4 IPF_Base_5 IPF_Base_6 
      24.9       33.2       33.0       32.4       32.4 
> library(DESeq2)
> dds <- DESeqDataSet(se, design = ~ PatientID + CellType)
> dds
class: DESeqDataSet 
dim: 60683 12 
metadata(1): version
assays(1): counts
rownames(60683): ENSG00000000003 ENSG00000000005 ... ENSG00000288603
  ENSG00000288604
rowData names(0):
colnames(12): IPF_Apex_1 IPF_Apex_2 ... IPF_Base_5 IPF_Base_6
colData names(4): SampleName CellType SampleID PatientID
> dds$CellType <- relevel(dds$CellType, ref = "Apex")
> dds$CellType
 [1] Apex Apex Apex Apex Apex Apex Base Base Base Base Base Base
Levels: Apex Base
> nrow(dds)
[1] 60683
> dds <- dds[ rowSums(counts(dds)) > 1, ]
> nrow(dds)
[1] 35652
> pdf("IPF count distribution boxplots.pdf")
> librarySizes <- colSums(assay(dds))
> barplot(librarySizes, names=names(librarySizes), las=2, main="Barplot of library sizes")
> abline(lty=2)
> dev.off()
null device 
          1 
> logcounts <- log2(assay(dds) + 1)
> CellTypeCol <- as.numeric(factor(sampleTable$CellType)) + 1
> pdf("IPF log2 counts boxplots.pdf")
> boxplot(logcounts, xlab="", ylab="Log2(Counts)", las=2, col=CellTypeCol)
> abline(h=median(as.matrix(logcounts)), col="blue")
> dev.off()
null device 
          1 
> rld <- rlog(dds, blind = FALSE)
> head(assay(rld), 3)
                IPF_Apex_1 IPF_Apex_2 IPF_Apex_3 IPF_Apex_4 IPF_Apex_5
ENSG00000000003   9.884389   9.251864   9.511442   9.885515   9.750926
ENSG00000000419  10.063040  10.088403  10.307439  10.231692  10.439893
ENSG00000000457   8.465619   8.585635   8.262552   8.354341   8.074878
                IPF_Apex_6 IPF_Base_1 IPF_Base_2 IPF_Base_3 IPF_Base_4
ENSG00000000003   9.607278  10.308629  10.117237   9.284835  10.198952
ENSG00000000419  10.121982   9.994238   9.973827  10.431289  10.025691
ENSG00000000457   8.186370   8.579681   8.686099   8.130544   8.407687
                IPF_Base_5 IPF_Base_6
ENSG00000000003   9.766709   9.492697
ENSG00000000419  10.231298  10.197499
ENSG00000000457   8.144704   8.153630
> colData(rld)
DataFrame with 12 rows and 5 columns
           SampleName CellType      SampleID PatientID        sizeFactor
             <factor> <factor>      <factor>  <factor>         <numeric>
IPF_Apex_1 IPF_Apex_1     Apex IPF_Apex_018C     IPF_1  1.13115713705173
IPF_Apex_2 IPF_Apex_2     Apex IPF_Apex_023A     IPF_2 0.956507479282592
IPF_Apex_3 IPF_Apex_3     Apex IPF_Apex_027C     IPF_3  1.00551871270339
IPF_Apex_4 IPF_Apex_4     Apex IPF_Apex_028B     IPF_4  1.01583574468062
IPF_Apex_5 IPF_Apex_5     Apex IPF_Apex_029A     IPF_5 0.844503940426809
...               ...      ...           ...       ...               ...
IPF_Base_2 IPF_Base_2     Base IPF_Base_023B     IPF_2 0.783029262881909
IPF_Base_3 IPF_Base_3     Base IPF_Base_027D     IPF_3  1.02897217350025
IPF_Base_4 IPF_Base_4     Base IPF_Base_028C     IPF_4  1.02090037799549
IPF_Base_5 IPF_Base_5     Base IPF_Base_029B     IPF_5  1.04086548599566
IPF_Base_6 IPF_Base_6     Base IPF_Base_043D     IPF_6  1.03924354918706
> pdf("IPF rlog counts boxplots.pdf")
> boxplot(assay(rld), xlab="", ylab="rlog(Counts)", las=2, col=CellTypeCol)
> abline(h=median(as.matrix(assay(rld))), col="blue")
> dev.off()
null device 
          1 
> sampleDists <- dist(t(assay(rld)))
> sampleDists
           IPF_Apex_1 IPF_Apex_2 IPF_Apex_3 IPF_Apex_4 IPF_Apex_5 IPF_Apex_6
IPF_Apex_2   85.37928                                                       
IPF_Apex_3   63.68299   90.65000                                            
IPF_Apex_4   47.50286   90.71825   61.54731                                 
IPF_Apex_5   58.65819   97.77471   47.71974   51.25312                      
IPF_Apex_6   68.08678   89.48908   46.62362   62.77162   55.09848           
IPF_Base_1   61.44822   89.70061   90.34351   77.75159   90.84048   91.68421
IPF_Base_2   84.64031   76.85140  106.13580   97.47150  108.25826  105.22899
IPF_Base_3   78.84067  112.18797   65.28842   75.43264   62.08214   72.49715
IPF_Base_4   70.87785   94.13456   90.21430   79.64992   92.39920   87.01755
IPF_Base_5   84.21103  115.06942   68.73063   78.29980   61.63944   72.72524
IPF_Base_6   81.22547  107.63951   58.25282   71.12730   60.81692   55.39032
           IPF_Base_1 IPF_Base_2 IPF_Base_3 IPF_Base_4 IPF_Base_5
IPF_Apex_2                                                       
IPF_Apex_3                                                       
IPF_Apex_4                                                       
IPF_Apex_5                                                       
IPF_Apex_6                                                       
IPF_Base_1                                                       
IPF_Base_2   62.28750                                            
IPF_Base_3  104.24744  119.46923                                 
IPF_Base_4   50.49307   67.03074  103.02498                      
IPF_Base_5  111.52966  119.44698   65.61428  109.01347           
IPF_Base_6  111.82084  122.89868   70.42191  108.48830   59.40072
> library(pheatmap)
> library(RColorBrewer)
> pdf("IPF Heatmap of sample-to-sample distances using the rlog values.pdf")
> sampleDistMatrix <- as.matrix( sampleDists )
> rownames(sampleDistMatrix) <- paste( rld$SampleName, sep = " - " )
> colnames(sampleDistMatrix) <- paste( rld$SampleName, sep = " - " )
> colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
> pheatmap(sampleDistMatrix, clustering_distance_rows = sampleDists, clustering_distance_cols = sampleDists, col = colors)
> dev.off()
null device 
          1 
> library(ggplot2)
> pcaData <- plotPCA(rld, intgroup = c("CellType", "SampleName"), returnData = TRUE)
> pcaData
                  PC1        PC2           group CellType SampleName       name
IPF_Apex_1 -10.774897   4.429007 Apex:IPF_Apex_1     Apex IPF_Apex_1 IPF_Apex_1
IPF_Apex_2  -7.322846  14.946161 Apex:IPF_Apex_2     Apex IPF_Apex_2 IPF_Apex_2
IPF_Apex_3  15.565202   4.169492 Apex:IPF_Apex_3     Apex IPF_Apex_3 IPF_Apex_3
IPF_Apex_4  -3.479860  10.216498 Apex:IPF_Apex_4     Apex IPF_Apex_4 IPF_Apex_4
IPF_Apex_5  11.587771   3.899974 Apex:IPF_Apex_5     Apex IPF_Apex_5 IPF_Apex_5
IPF_Apex_6  16.602899  10.520723 Apex:IPF_Apex_6     Apex IPF_Apex_6 IPF_Apex_6
IPF_Base_1 -32.617369  -2.437392 Base:IPF_Base_1     Base IPF_Base_1 IPF_Base_1
IPF_Base_2 -33.513235  -9.473068 Base:IPF_Base_2     Base IPF_Base_2 IPF_Base_2
IPF_Base_3  20.076187 -14.547166 Base:IPF_Base_3     Base IPF_Base_3 IPF_Base_3
IPF_Base_4 -26.955980  -5.806052 Base:IPF_Base_4     Base IPF_Base_4 IPF_Base_4
IPF_Base_5  23.123664 -19.105421 Base:IPF_Base_5     Base IPF_Base_5 IPF_Base_5
IPF_Base_6  27.708462   3.187244 Base:IPF_Base_6     Base IPF_Base_6 IPF_Base_6
> percentVar <- round(100 * attr(pcaData, "percentVar"))
> pdf("IPF PCA plot using the rlog values with custom ggplot2 code.pdf")
> ggplot(pcaData, aes(x = PC1, y = PC2, color = SampleName, shape = CellType)) + geom_point(size =3) + xlab(paste0("PC1: ", percentVar[1], "% variance")) + ylab(paste0("PC2: ", percentVar[2], "% variance")) + coord_fixed()
> dev.off()
null device 
          1 
> dds <- DESeq(dds)
estimating size factors
estimating dispersions
gene-wise dispersion estimates
mean-dispersion relationship
final dispersion estimates
fitting model and testing
> res <- results(dds)
> res
log2 fold change (MLE): CellType Base vs Apex 
Wald test p-value: CellType Base vs Apex 
DataFrame with 35652 rows and 6 columns
                         baseMean       log2FoldChange             lfcSE
                        <numeric>            <numeric>         <numeric>
ENSG00000000003  900.995048861944    0.274572470536805 0.218113665659691
ENSG00000000419  1167.13262273673  -0.0870599829796065 0.122842449375669
ENSG00000000457  328.551227367612   0.0403073096246747 0.125526388977915
ENSG00000000460  258.797534404146   -0.116104924161294 0.385388554750233
ENSG00000000938 0.611464346836958    0.602221841343594  2.67320467669664
...                           ...                  ...               ...
ENSG00000288596  82.4200289527011   -0.374828369365065 0.287133668257103
ENSG00000288597  3.76217018284374 -0.00465452637469805 0.892194261765208
ENSG00000288598  5.38223445848675    0.241110590208377 0.677590137015358
ENSG00000288602 0.131906041749891   -0.585982007727865  3.10440301629503
ENSG00000288603 0.576403685870969    0.998538085508474  3.06604176882643
                                stat            pvalue              padj
                           <numeric>         <numeric>         <numeric>
ENSG00000000003      1.2588503783399 0.208084379852194 0.952892954444803
ENSG00000000419   -0.708712529114143 0.478502888154225 0.999820638085544
ENSG00000000457    0.321106262618344 0.748129864538742 0.999820638085544
ENSG00000000460   -0.301267182769713 0.763210763445056 0.999820638085544
ENSG00000000938    0.225280857314591 0.821760790586829                NA
...                              ...               ...               ...
ENSG00000288596    -1.30541420530817 0.191751843877153  0.93721406838833
ENSG00000288597 -0.00521694273788431 0.995837500816295                NA
ENSG00000288598    0.355835448358824 0.721963800338702 0.999820638085544
ENSG00000288602    -0.18875835535916 0.850282212625721                NA
ENSG00000288603    0.325676608734094 0.744669043704608                NA
> summary(res)

out of 35652 with nonzero total read count
adjusted p-value < 0.1
LFC > 0 (up)       : 277, 0.78%
LFC < 0 (down)     : 324, 0.91%
outliers [1]       : 0, 0%
low counts [2]     : 15207, 43%
(mean count < 5)
[1] see 'cooksCutoff' argument of ?results
[2] see 'independentFiltering' argument of ?results

> sum(res$padj < 0.1, na.rm=TRUE)
[1] 601
> res05 <- results(dds, alpha=0.05)
> summary(res05)

out of 35652 with nonzero total read count
adjusted p-value < 0.05
LFC > 0 (up)       : 200, 0.56%
LFC < 0 (down)     : 233, 0.65%
outliers [1]       : 0, 0%
low counts [2]     : 15898, 45%
(mean count < 6)
[1] see 'cooksCutoff' argument of ?results
[2] see 'independentFiltering' argument of ?results

> sum(res05$padj < 0.05, na.rm=TRUE)
[1] 433
> library(AnnotationDbi)
> library(org.Hs.eg.db)

> columns(org.Hs.eg.db)
 [1] "ACCNUM"       "ALIAS"        "ENSEMBL"      "ENSEMBLPROT"  "ENSEMBLTRANS"
 [6] "ENTREZID"     "ENZYME"       "EVIDENCE"     "EVIDENCEALL"  "GENENAME"    
[11] "GO"           "GOALL"        "IPI"          "MAP"          "OMIM"        
[16] "ONTOLOGY"     "ONTOLOGYALL"  "PATH"         "PFAM"         "PMID"        
[21] "PROSITE"      "REFSEQ"       "SYMBOL"       "UCSCKG"       "UNIGENE"     
[26] "UNIPROT"     
> res$symbol <- mapIds(org.Hs.eg.db, keys=row.names(res), column="SYMBOL", keytype="ENSEMBL", multiVals="first")
'select()' returned 1:many mapping between keys and columns
> res$entrez <- mapIds(org.Hs.eg.db, keys=row.names(res), column="ENTREZID", keytype="ENSEMBL", multiVals="first")
'select()' returned 1:many mapping between keys and columns
> res$genename <- mapIds(org.Hs.eg.db, keys=row.names(res), column="GENENAME", keytype="ENSEMBL", multiVals="first")
'select()' returned 1:many mapping between keys and columns
> resOrdered <- res[order(res$pvalue),]
> head(resOrdered)
log2 fold change (MLE): CellType Base vs Apex 
Wald test p-value: CellType Base vs Apex 
DataFrame with 6 rows and 9 columns
                        baseMean    log2FoldChange             lfcSE
                       <numeric>         <numeric>         <numeric>
ENSG00000163536  193.25699090769 -1.51935652174296 0.187347068537747
ENSG00000179348 167.215078405996  1.83930171168492 0.231167033674417
ENSG00000111348 791.214277905171 -2.32868471099098 0.295454660866374
ENSG00000014257 744.084928880931 -2.98382268395172 0.396171329425455
ENSG00000170439  81.172734163023 -1.93987469325923 0.268917098653299
ENSG00000126733 50.0757930396371 -4.44031446855197 0.634378037490355
                             stat               pvalue                 padj
                        <numeric>            <numeric>            <numeric>
ENSG00000163536 -8.10984945535368 5.06825157513183e-16  1.0362040345357e-11
ENSG00000179348  7.95659174428584 1.76843016753479e-15 1.80777773876244e-11
ENSG00000111348 -7.88169901995278 3.22959201572467e-15 2.20096695871636e-11
ENSG00000014257 -7.53164719990966 5.01041844815339e-14  2.5609501293124e-10
ENSG00000170439 -7.21365321496426 5.44703710300101e-13 2.22729347141711e-09
ENSG00000126733 -6.99947697766804 2.56919792601091e-12 8.75454193288217e-09
                     symbol      entrez                                genename
                <character> <character>                             <character>
ENSG00000163536    SERPINI1        5274                serpin family I member 1
ENSG00000179348       GATA2        2624                  GATA binding protein 2
ENSG00000111348     ARHGDIB         397     Rho GDP dissociation inhibitor beta
ENSG00000014257        ACPP          55              acid phosphatase, prostate
ENSG00000170439     METTL7B      196410               methyltransferase like 7B
ENSG00000126733       DACH2      117154 dachshund family transcription factor 2
> resOrderedDF <- as.data.frame(resOrdered)
> write.csv(resOrderedDF, file = "IPF_result_all.csv")
> resSig <- subset(resOrdered, padj < 0.05 & abs(log2FoldChange) > 1)
> write.csv(as.data.frame(resSig), file = "IPF_result_sig.csv")
> library(genefilter)

Attaching package: \u2018genefilter\u2019

The following objects are masked from \u2018package:matrixStats\u2019:

    rowSds, rowVars

> topVarGenes <- head(order(rowVars(assay(rld)), decreasing = TRUE), 1000)
> mat <- assay(rld)[ topVarGenes, ]
> mat <- mat - rowMeans(mat)
> anno <- as.data.frame(colData(rld)[, c("CellType", "SampleName")])
> pdf("IPF Top 1000 variable genes across samples pheatmap.pdf")
> pheatmap(mat, fontsize_row = 4, scale = "row", color = colorRampPalette(c("green","black","red"))(1000), annotation_col = anno)
> dev.off()
null device 
          1 
> matSig <- assay(rld[row.names(resSig)])
> pdf("IPF significant genes across samples pheatmap.pdf")
> pheatmap(matSig, fontsize_row = 4, scale = "row", color = colorRampPalette(rev(brewer.pal(11, "RdBu")))(255), annotation_col = anno)
> dev.off()
null device 
          1 
> library(apeglm)
> pdf("IPF mean of normalizad counts.pdf")
> plotMA(res, ylim=c(-5,5))
> dev.off()
null device 
          1 
> library(ggplot2)
> library(ggrepel)
> resdata <- as.data.frame(res)
> resdata <- na.omit(resdata)
> resdata$Threshold = as.factor(ifelse(resdata$padj < 0.05 & abs(resdata$log2FoldChange) > 1, ifelse(resdata$log2FoldChange> 1,'Up','Down'),'Nonsignificant'))
> p1 <- ggplot(resdata, aes(x = log2FoldChange, y = -log10(padj), color = Threshold, label=symbol)) + geom_point(size = 1.5, alpha = 0.4) + labs(x = "log2FoldChange", y = "-log10(padj)") + geom_text_repel(data = subset(resdata, resdata$padj < 0.0001 & abs(resdata$log2FoldChange)>= 4), aes(label = symbol), size = 3, box.padding = unit(0.5, "lines"), point.padding = unit(0.8, "lines"), segment.color = "black", show.legend = FALSE )
> p2 <- p1 + geom_vline(xintercept = c(-1, 1), color = 'black', linetype = 2, size = 0.5) +  geom_hline(yintercept = -log10(0.05), color = 'black', linetype = 2, size = 0.5)
> pdf("IPF volcano plot.pdf")
> p2
> dev.off()
null device 
          1
